<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on altr </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://altr.hayes.io/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Filters</title>
      <link>https://altr.hayes.io/expressions/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/expressions/filters/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Opperations</title>
      <link>https://altr.hayes.io/expressions/opperations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/expressions/opperations/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Expressions</title>
      <link>https://altr.hayes.io/expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/expressions/</guid>
      <description>&lt;p&gt;&lt;code&gt;altr&lt;/code&gt; will do a lookup of a variable name &lt;code&gt;my_value&lt;/code&gt; in when either of the
following are true:
  - &lt;code&gt;{{ my_value }}&lt;/code&gt; appears in any DOM node&amp;rsquo;s [&lt;code&gt;textContent&lt;/code&gt;][textContent] or
    in any DOM node attribute that is not prefixed by &lt;code&gt;altr&lt;/code&gt;.
  - DOM attribute matches &lt;code&gt;altr-attr-*=&amp;quot;my_value&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;altr-attr-my-attribute=&amp;quot;my_value&amp;quot;&lt;/code&gt; syntax will set the &lt;code&gt;my-attribute&lt;/code&gt;
attribute on the DOM node to whatever &lt;code&gt;my_value&lt;/code&gt; evaluates to in the current
template context. When the template context is updated, this will update as
well. If &lt;code&gt;my_value&lt;/code&gt; evaluates to &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, then
&lt;code&gt;my-attribute&lt;/code&gt; will simply be excluded, which is useful for boolean attributes
such as &lt;code&gt;checked&lt;/code&gt; (which can also have a value), or for SVG elements which will
throw errors for illegal values.&lt;/p&gt;

&lt;p&gt;Template variable lookups are backed by [&lt;code&gt;dirtybit&lt;/code&gt;][dirtybit].
&lt;code&gt;dirtybit&lt;/code&gt; supports dot-path lookups, literals, a wide range of
operators, as well as &lt;code&gt;filters&lt;/code&gt;. See the
&lt;a href=&#34;https://github.com/hayes/dirtybit/blob/master/README.md&#34;&gt;documentation&lt;/a&gt;
for more details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Values</title>
      <link>https://altr.hayes.io/expressions/values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/expressions/values/</guid>
      <description>&lt;p&gt;&lt;code&gt;altr&lt;/code&gt; will do a lookup of a variable name &lt;code&gt;my_value&lt;/code&gt; in when either of the
following are true:
  - &lt;code&gt;{{ my_value }}&lt;/code&gt; appears in any DOM node&amp;rsquo;s [&lt;code&gt;textContent&lt;/code&gt;][textContent] or
    in any DOM node attribute that is not prefixed by &lt;code&gt;altr&lt;/code&gt;.
  - DOM attribute matches &lt;code&gt;altr-attr-*=&amp;quot;my_value&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;altr-attr-my-attribute=&amp;quot;my_value&amp;quot;&lt;/code&gt; syntax will set the &lt;code&gt;my-attribute&lt;/code&gt;
attribute on the DOM node to whatever &lt;code&gt;my_value&lt;/code&gt; evaluates to in the current
template context. When the template context is updated, this will update as
well. If &lt;code&gt;my_value&lt;/code&gt; evaluates to &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, then
&lt;code&gt;my-attribute&lt;/code&gt; will simply be excluded, which is useful for boolean attributes
such as &lt;code&gt;checked&lt;/code&gt; (which can also have a value), or for SVG elements which will
throw errors for illegal values.&lt;/p&gt;

&lt;p&gt;Template variable lookups are backed by [&lt;code&gt;dirtybit&lt;/code&gt;][dirtybit].
&lt;code&gt;dirtybit&lt;/code&gt; supports dot-path lookups, literals, a wide range of
operators, as well as &lt;code&gt;filters&lt;/code&gt;. See the
&lt;a href=&#34;https://github.com/hayes/dirtybit/blob/master/README.md&#34;&gt;documentation&lt;/a&gt;
for more details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://altr.hayes.io/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/getting-started/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Instalation:&lt;/h3&gt;

&lt;h5 id=&#34;toc_1&#34;&gt;In Node or browserify:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;npm install altr&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;in your module: &lt;code&gt;var altr = require(&#39;altr&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;toc_2&#34;&gt;Otherwise:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Download altr.js from &lt;a href=&#34;https://github.com/hayes/altr/tree/master/dist&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;include it in your html before your other JavaScript files&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Basic Usage:&lt;/h3&gt;

&lt;div altr-example altr-raw=&#34;true&#34;&gt;
  &lt;ul name=&#34;tabs&#34; altr-for=&#34;tab in tabs&#34;&gt;
    &lt;li
      class=&#34;{% tab === activeTab ? &#39;active&#39; : &#39;&#39; %}&#34;
      data-view=&#34;{% tab %}&#34;
    &gt;
    {% tab %}
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;div class=&#34;tab-content&#34; style=&#34;height: 250px;&#34;&gt;
    &lt;div altr-replace=&#34;els[activeTab]&#34;&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div
    data-type=&#34;javascript&#34;
    class=&#34;{% activeTab === &#39;javascript&#39;&#39; ? &#39;&#39; : &#39;ahidden&#39; %}&#34;
    altr-raw
&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var state = {name: &amp;quot;world&amp;quot;, list: [1, 2, 3, 4, 5]}
var template = altr(document.getElementById(&#39;root&#39;), state)
var i = 5

setInterval(function() {
  state.list.push(++i)
  state.list = state.list.slice(-5)
  template.update(state)
}, 500)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div
    data-type=&#34;html&#34;
    class=&#34;{% activeTab === &#39;html&#39;&#39; ? &#39;&#39; : &#39;ahidden&#39; %}&#34;
    altr-raw
&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;root&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;hello, {{ name }}!&amp;lt;/h1&amp;gt;
  If you highlight an item below, you can see how elements are bound to data.
  &amp;lt;ul altr-for=&amp;quot;item in list&amp;quot;&amp;gt;
    &amp;lt;li altr-text=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>https://altr.hayes.io/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/node/</guid>
      <description></description>
    </item>
    
    <item>
      <title>API</title>
      <link>https://altr.hayes.io/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/api/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;&lt;code&gt;altr(template, data, sync, doc)&lt;/code&gt; -&amp;gt; altr instance&lt;/h3&gt;

&lt;p&gt;Create a new altr instance, which subclasses &lt;a href=&#34;http://nodejs.org/api/events.html#events_class_events_eventemitter&#34;&gt;Event
Emitter&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt;: Can be either a string or a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/element&#34;&gt;DOM element&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: Initial data to render the template with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sync&lt;/code&gt;: When false, all DOM updates are batched with
&lt;code&gt;requestAnimationFrame&lt;/code&gt;. Otherwise, all updates happen in the turn of the
event loop in which they are called. Defaults to true in node (and
browserify).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;&lt;code&gt;altr.render(template, data, el)&lt;/code&gt; -&amp;gt; altr instance&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt;: either a template name added using altr.incude, or a
full template (same as first argument to the default constructor).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: Initial data to render the template with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;el&lt;/code&gt;: (optional) an element to render the template into.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;&lt;code&gt;altr.include(name, template)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Make a template available for inclusion in any other template
 * &lt;code&gt;name&lt;/code&gt;: the name of the template, a string.
 * &lt;code&gt;template&lt;/code&gt;: the template string to be included.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;&lt;code&gt;altr.addFilter(name, filter)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Add a filter to &lt;code&gt;altr&lt;/code&gt;
 * &lt;code&gt;name&lt;/code&gt;: The name of the filter.
 * &lt;code&gt;filter&lt;/code&gt;: The filter constructor function. See &lt;a href=&#34;https://www.npmjs.org/package/dirtybit&#34;&gt;dirtybit&lt;/a&gt; for its
   expected signature.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;&lt;code&gt;instance.update(data[, sync])&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Update the template with &lt;code&gt;data&lt;/code&gt;. If &lt;code&gt;sync&lt;/code&gt; is true, the template will be updated
synchronously rather than on the next animation frame.&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;&lt;code&gt;instance.into(el)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Insert the template into the &lt;code&gt;el&lt;/code&gt;, which is expected to be a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/element&#34;&gt;DOM
element&lt;/a&gt; (useful if rendering the template from a string).&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;&lt;code&gt;instance.toString()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Returns the current state of the template as a string.&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;&lt;code&gt;instance.runBatch()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Immediately runs any outstanding DOM updates that have been queued.&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;&lt;code&gt;instance.templateString(template, callback)&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt;: a template string, may contain &lt;code&gt;{{ my.value }}&lt;/code&gt; type tags.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback&lt;/code&gt;: a function that will be called when the template result changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;instance Properties&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;instance.batch&lt;/code&gt; is an instance of
&lt;a href=&#34;https://github.com/hayes/batch-queue&#34;&gt;&lt;code&gt;batch-queue&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance.lookups&lt;/code&gt; is an instance of &lt;a href=&#34;https://www.npmjs.org/package/dirtybit&#34;&gt;&lt;code&gt;dirtybit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;instance Events&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt; is emitted with the templates current state any time the template
state is updated&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draw&lt;/code&gt; is emitted with the templates current state after a dom update
occurs.  the current state is not guaranteed to be the state that triggered
the change.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The `children` tag</title>
      <link>https://altr.hayes.io/tags/children/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/tags/children/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div altr-children=&amp;quot;list_of_html_elements&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;children&lt;/code&gt; tag will replace an elements content with the specified DOM
nodes.  &lt;code&gt;list_of_html_elements&lt;/code&gt; should either resolve to a single DOM node, or
an array of DOM nodes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The `html` tag</title>
      <link>https://altr.hayes.io/tags/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/tags/html/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div altr-html=&amp;quot;my_html&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;html&lt;/code&gt; tag works exactly like the &lt;code&gt;text&lt;/code&gt; tag, but sets the
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Element.innerHTML&#34;&gt;&lt;code&gt;innerHTML&lt;/code&gt;&lt;/a&gt;
of the element instead of the &lt;code&gt;textContent&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The `for` tag</title>
      <link>https://altr.hayes.io/tags/for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/tags/for/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ol altr-for=&amp;quot;item in my_items&amp;quot;&amp;gt;&amp;lt;li&amp;gt;{{ item.name }}&amp;lt;li&amp;gt;&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks up &lt;code&gt;my_items&lt;/code&gt; in the current template context. The iterator variable is a
new context variable which can be looked up in the body of the for loop (the
inner HTML of the DOM element on which the attribute was defined).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; tag will take its &lt;code&gt;innerHtml&lt;/code&gt; and use it as a template to render each
item in the passed array. When the list of items changes, &lt;code&gt;altr&lt;/code&gt; will will
update the DOM to reflect the changes. In particular it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Removes elements associated with items that have been removed&lt;/li&gt;
&lt;li&gt;Updates elements that are still part of the list if necessary&lt;/li&gt;
&lt;li&gt;Create new elements for items that have been added.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default &lt;code&gt;altr&lt;/code&gt; will use &lt;code&gt;indexOf&lt;/code&gt; to determine if an item is still part of
the list and where it is located.  You can also specify a unique key if you
want to pass in objects that &lt;em&gt;represent&lt;/em&gt; the same item, but point to a
different object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ol altr-for=&amp;quot;item:my_unique_key in my_items&amp;quot;&amp;gt;&amp;lt;li&amp;gt;{{ item.name }}&amp;lt;li&amp;gt;&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://altr.hayes.io/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/index.html</guid>
      <description>&lt;p&gt;&lt;code&gt;altr&lt;/code&gt; is small efficient DOM-based templating engine. It updates the parts of
the dom that need to change, and keeps everything else intact.&lt;/p&gt;

&lt;div altr-example altr-raw=&#34;true&#34;&gt;
  &lt;ul name=&#34;tabs&#34; altr-for=&#34;tab in tabs&#34;&gt;
    &lt;li
      class=&#34;{% tab === activeTab ? &#39;active&#39; : &#39;&#39; %}&#34;
      data-view=&#34;{% tab %}&#34;
    &gt;
    {% tab %}
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;div class=&#34;tab-content&#34; style=&#34;height: 50px;&#34;&gt;
    &lt;div altr-replace=&#34;els[activeTab]&#34;&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div
    data-type=&#34;javascript&#34;
    class=&#34;{% activeTab === &#39;javascript&#39;&#39; ? &#39;&#39; : &#39;ahidden&#39; %}&#34;
    altr-raw
&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;altr.render(&#39;hello, {{ name }}!&#39;, {name: &#39;world&#39;}, document.body)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Its api was designed to so it can be easily integrated and mixed with other
view or templating libraries. Components built using other tools can easily be
included in a template by including the component&amp;rsquo;s root element the template&amp;rsquo;s
&lt;a href=&#34;./tags/replace&#34;&gt;context&lt;/a&gt; or dynamically instantiated and updated using
&lt;a href=&#34;./decorators&#34;&gt;decorators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;altr&lt;/code&gt; is not designed to be a complete front-end framework like &lt;code&gt;React&lt;/code&gt; or
&lt;code&gt;Ractive.js&lt;/code&gt;.  altr is a way to keep the dom in sync with your state, it does
not provide event handling or delegation.  Instead, it makes it simple to
build up templates from small components that each handle their own events.
This makes it easy to mix and match, or itegrate with existing solutions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The `if` tag</title>
      <link>https://altr.hayes.io/tags/if/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/tags/if/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div altr-if=&amp;quot;my_val&amp;quot;&amp;gt;!!my_val === true&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks up &lt;code&gt;my_value&lt;/code&gt; in the current template context and tests its truthiness.
If &lt;code&gt;my_value&lt;/code&gt; is truthy, the element will be rendered as normal. If it is not,
the element will be completely removed from the DOM until the value is truthy
again.  Child nodes will not be updated until the value is truthy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The `include` tag</title>
      <link>https://altr.hayes.io/tags/include/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/tags/include/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div altr-include=&amp;quot;another_template&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;include&lt;/code&gt; tag will render another template into its element. You will need
to use one of the &lt;code&gt;include&lt;/code&gt; methods described below to make the template
available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tags Overview</title>
      <link>https://altr.hayes.io/tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/tags/</guid>
      <description>&lt;p&gt;&lt;code&gt;altr&lt;/code&gt; tags are special attributes that can be set on any element to change how
that element and its children are rendered. With a few exceptions, &lt;code&gt;altr&lt;/code&gt;
treats the value that the attribute points to as a template variable: When it
renders the template, it looks up the value against the template context and
replaces all instances of the variable with the value returned by the lookup.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The `raw` tag</title>
      <link>https://altr.hayes.io/tags/raw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>https://altr.hayes.io/tags/raw/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div altr-raw=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;raw&lt;/code&gt; tag tells altr to ignore everything inside the current element, and
just render it as-is.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>